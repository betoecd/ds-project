# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import admin_panel_pb2 as admin__panel__pb2


class AdminPanelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertClient = channel.unary_unary(
                '/panel.AdminPanel/InsertClient',
                request_serializer=admin__panel__pb2.RequestValue.SerializeToString,
                response_deserializer=admin__panel__pb2.Response.FromString,
                )
        self.UpdateClient = channel.unary_unary(
                '/panel.AdminPanel/UpdateClient',
                request_serializer=admin__panel__pb2.RequestValue.SerializeToString,
                response_deserializer=admin__panel__pb2.Response.FromString,
                )
        self.GetClient = channel.unary_unary(
                '/panel.AdminPanel/GetClient',
                request_serializer=admin__panel__pb2.Request.SerializeToString,
                response_deserializer=admin__panel__pb2.Response.FromString,
                )
        self.DeleteClient = channel.unary_unary(
                '/panel.AdminPanel/DeleteClient',
                request_serializer=admin__panel__pb2.Request.SerializeToString,
                response_deserializer=admin__panel__pb2.Response.FromString,
                )


class AdminPanelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InsertClient(self, request, context):
        """Insert client hashtable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClient(self, request, context):
        """Update client value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClient(self, request, context):
        """Get client value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteClient(self, request, context):
        """Delete client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminPanelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertClient': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertClient,
                    request_deserializer=admin__panel__pb2.RequestValue.FromString,
                    response_serializer=admin__panel__pb2.Response.SerializeToString,
            ),
            'UpdateClient': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClient,
                    request_deserializer=admin__panel__pb2.RequestValue.FromString,
                    response_serializer=admin__panel__pb2.Response.SerializeToString,
            ),
            'GetClient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClient,
                    request_deserializer=admin__panel__pb2.Request.FromString,
                    response_serializer=admin__panel__pb2.Response.SerializeToString,
            ),
            'DeleteClient': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteClient,
                    request_deserializer=admin__panel__pb2.Request.FromString,
                    response_serializer=admin__panel__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panel.AdminPanel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminPanel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InsertClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/panel.AdminPanel/InsertClient',
            admin__panel__pb2.RequestValue.SerializeToString,
            admin__panel__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/panel.AdminPanel/UpdateClient',
            admin__panel__pb2.RequestValue.SerializeToString,
            admin__panel__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/panel.AdminPanel/GetClient',
            admin__panel__pb2.Request.SerializeToString,
            admin__panel__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/panel.AdminPanel/DeleteClient',
            admin__panel__pb2.Request.SerializeToString,
            admin__panel__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
